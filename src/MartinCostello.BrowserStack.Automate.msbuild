<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(SolutionDir)AssemblyVersion.targets" />
  <PropertyGroup>
    <Configuration>Release</Configuration>
    <Platform>Any CPU</Platform>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildThisFileDirectory)</SolutionDir>
    <SolutionFile>$(SolutionDir)MartinCostello.BrowserStack.Automate.sln</SolutionFile>
    <OutputPath Condition=" '$(TF_BUILD)' != 'True' ">$(SolutionDir)\BuildOutput</OutputPath>
    <RunTests Condition="'$(RunTests)' == '' and '$(TF_BUILD)' != 'True' ">true</RunTests>
    <BuildProperties Condition=" '$(TF_BUILD)' != 'True' ">Platform=$(Platform);OutputPath=$(OutputPath)</BuildProperties>
    <CreatePackage Condition="'$(CI)' != ''">true</CreatePackage>
    <CreatePackage Condition="'$(CreatePackage)' == ''">false</CreatePackage>
    <DotNetExecPrefix Condition="'$(OS)' == 'Unix'">mono </DotNetExecPrefix>
    <CodeTaskFactoryAssembly Condition="'$(MSBuildToolsVersion)' != '14.0'">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</CodeTaskFactoryAssembly>
    <CodeTaskFactoryAssembly Condition="'$(MSBuildToolsVersion)' == '14.0'">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</CodeTaskFactoryAssembly>
  </PropertyGroup>
  <Target Name="Clean">
    <MSBuild Targets="Clean" Projects="$(SolutionFile)" Properties="Configuration=$(Configuration);$(BuildProperties)" />
  </Target>
  <Target Name="Build" DependsOnTargets="RestorePackages">
    <MSBuild Targets="Build" Projects="$(SolutionFile)" Properties="Configuration=$(Configuration);$(BuildProperties)" />
  </Target>
  <Target Name="Rebuild" DependsOnTargets="RestorePackages">
    <MSBuild Targets="Rebuild" Projects="$(SolutionFile)" Properties="Configuration=$(Configuration);$(BuildProperties)" />
  </Target>
  <Target Name="BeforeBuild" BeforeTargets="Build;Rebuild">
    <CallTarget Targets="UpdateAssemblyConfiguration" Condition="'$(OS)' != 'Unix'" />
  </Target>
  <Target Name="AfterBuild" AfterTargets="Build;Rebuild">
    <CallTarget Targets="Test" Condition="'$(RunTests)' == 'true'" />
    <CallTarget Targets="CreateNuGetPackage" Condition="'$(CreatePackage)' == 'true'" />
  </Target>
  <Target Name="RestorePackages">
    <PropertyGroup>
      <NuGetToolsPath>$([System.IO.Path]::Combine($(SolutionDir), "Tools", "NuGet"))</NuGetToolsPath>
      <NuGetExePath>$(NuGetToolsPath)\NuGet.exe</NuGetExePath>
      <RequireRestoreConsent>false</RequireRestoreConsent>
    </PropertyGroup>
    <Message Text="Restoring NuGet packages..." Importance="normal" />
    <Exec Condition="'$(OS)' == 'Unix'" Command="chmod +x %22$(NuGetExePath)%22" />
    <Exec Command="$(DotNetExecPrefix)%22$(NuGetExePath)%22 restore %22$(SolutionFile)%22" LogStandardErrorAsError="true" />
  </Target>
  <Target Name="Test">
    <ItemGroup Condition="'$(TestTool)' == ''">
      <TestTool Include="$(SolutionDir)packages\xunit.runner.console.*\tools\xunit.console.exe" />
    </ItemGroup>
    <PropertyGroup Condition="'$(TestTool)' == ''">
      <TestTool>%22@(TestTool)%22</TestTool>
    </PropertyGroup>
    <ItemGroup>
      <TestContainer Include="$(OutputPath)\*Tests*.dll" />
    </ItemGroup>
    <PropertyGroup>
      <_TestCommand>@(TestContainer->'%22%(fullpath)%22', ' ')</_TestCommand>
    </PropertyGroup>
    <Exec Condition="'$(OS)' == 'Unix'" Command="chmod +x %22$(TestTool)%22" />
    <Exec Command="$(DotNetExecPrefix)$(TestTool) $(_TestCommand)" WorkingDirectory="$(OutputPath)" />
  </Target>
  <Target Name="CreateNuGetPackage">
    <PropertyGroup>
      <_ReleasesFileName>$(SolutionDir)\..\releases.txt</_ReleasesFileName>
    </PropertyGroup>
    <!--
      If this is an AppVeyor CI build that is not associated with a tag
      (i.e. not a build for release), then determine the pre-release version
      number to use by calculating the build number offset from the build
      number of the last released version compared to this build number.
    -->
    <GetPrereleaseVersionForCIBuild Condition="'$(NuGetPrerelease)' == '' and '$(CI)' != '' and '$(APPVEYOR_REPO_TAG)' == 'false' and '$(APPVEYOR_BUILD_NUMBER)' != ''"
                                    AssemblyVersion="$(AssemblyVersion)"
                                    CIBuildNumber="$(APPVEYOR_BUILD_NUMBER)"
                                    ReleasesFileName="$(_ReleasesFileName)">
      <Output PropertyName="_PrereleaseVersion" TaskParameter="PrereleaseVersion" />
    </GetPrereleaseVersionForCIBuild>
    <PropertyGroup Condition="'$(NuGetPrerelease)' == '' and '$(_PrereleaseVersion)' != ''">
      <NuGetPrerelease>beta$(_PrereleaseVersion)</NuGetPrerelease>
    </PropertyGroup>
    <PropertyGroup>
      <NuGetVersion Condition="'$(NuGetVersion)' == ''">$(AssemblyVersion.Substring(0, $(AssemblyVersion.LastIndexOf(`.`))))</NuGetVersion>
      <NuGetVersion Condition="'$(NuGetPrerelease)' != ''">$(NuGetVersion)-$(NuGetPrerelease)</NuGetVersion>
    </PropertyGroup>
    <RemoveDir Directories="$(OutputPath)\src" />
    <ItemGroup>
      <SourceFiles Include="$(SolutionDir)\*.cs;$(SolutionDir)\**\MartinCostello.BrowserStack.Automate\**\*.cs" Exclude="$(SolutionDir)\**\obj\**\*.cs" />
    </ItemGroup>
    <Copy SourceFiles="@(SourceFiles)" DestinationFolder="$(OutputPath)\src\%(RecursiveDir)" />
    <PropertyGroup>
      <NuGetTool>$(SolutionDir)\Tools\NuGet\NuGet.exe</NuGetTool>
      <NuSpecFile>$(OutputPath)\MartinCostello.BrowserStack.Automate.nuspec</NuSpecFile>
    </PropertyGroup>
    <Exec Command="$(NuGetTool) pack %22$(NuSpecFile)%22 -Properties AssemblyVersion=$(NuGetVersion) -OutputDirectory $(OutputPath) -Symbols" StandardOutputImportance="high" />
  </Target>
  <Target Name="UpdateAssemblyConfiguration">
    <PropertyGroup Condition="'$(APPVEYOR)' != ''">
      <GitBranch>$(APPVEYOR_REPO_BRANCH)</GitBranch>
      <GitCommit>$(APPVEYOR_REPO_COMMIT)</GitCommit>
    </PropertyGroup>
    <UpdateAssemblyConfiguration Condition="$(GitBranch) != '' and $(GitCommit) != ''" AssemblyInfoPath="$(SolutionDir)CommonAssemblyInfo.cs" Branch="$(GitBranch)" CommitId="$(GitCommit)" />
  </Target>
  <UsingTask TaskName="GetPrereleaseVersionForCIBuild"
             TaskFactory="CodeTaskFactory"
             AssemblyFile="$(CodeTaskFactoryAssembly)" >
    <ParameterGroup>
      <AssemblyVersion Required="true" />
      <CIBuildNumber Required="true" />
      <ReleasesFileName Required="true" />
      <PrereleaseVersion Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Linq" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        string lastReleasedVersionString = System.IO.File.ReadAllLines(ReleasesFileName).LastOrDefault();
        Version lastReleasedVersion = new Version(lastReleasedVersionString ?? "1.0.0.0");
        Version thisVersion = new Version(AssemblyVersion);
        int thisBuildNumber = int.Parse(CIBuildNumber, System.Globalization.CultureInfo.InvariantCulture);

        if (lastReleasedVersion.Major == thisVersion.Major &&
            lastReleasedVersion.Minor == thisVersion.Minor)
        {
            // If the version number has not increased, just use the build
            // number as its guaranteed to be larger than the last number
            PrereleaseVersion = thisBuildNumber.ToString("000", System.Globalization.CultureInfo.InvariantCulture);
        }
        else
        {
            // Determine the offset between this build and the build of the last version
            PrereleaseVersion = (thisBuildNumber - lastReleasedVersion.Build).ToString("000", System.Globalization.CultureInfo.InvariantCulture);
        }
      ]]>
      </Code>
    </Task>
  </UsingTask>
  <UsingTask
    TaskName="UpdateAssemblyConfiguration"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="$(CodeTaskFactoryAssembly)" >
    <ParameterGroup>
      <AssemblyInfoPath Required="true" />
      <CommitId Required="true" />
      <Branch Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          string content = File.ReadAllText(AssemblyInfoPath);
          content = content.Replace("[assembly: AssemblyConfiguration(\"\")]", "[assembly: AssemblyConfiguration(\"" + CommitId + "|" + Branch + "\")]");
          File.WriteAllText(AssemblyInfoPath, content);
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
